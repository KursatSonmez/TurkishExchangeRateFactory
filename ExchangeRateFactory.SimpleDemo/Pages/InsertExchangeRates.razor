@page "/insert-exchange-rates"

@using ExchangeRateFactory.SimpleDemo.Data
@using System.Threading;
@implements IDisposable

@inject ExchangeRateService ExchangeRateService

<h1>Insert New Exchange Rates</h1>

<p>This component allow to insert the exchange rates.</p>

@if (exchangeRates == null || string.IsNullOrWhiteSpace(errorMessage) == false)
{
    if (exchangeRates == null)
    {
        <p><em>@(date.DateTime.ToLongDateString()) Loading...</em></p>
    }
    if (string.IsNullOrWhiteSpace(errorMessage) == false)
    {
        <h5 style="color:red; font-weight:bold;">@errorMessage</h5>
    }
}
else
{
    <input type="date" value="@date.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)" @onchange="DateOnChange" />
    <br />
    <h3>(@newRecords) new records added.</h3>
    <br />
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>

                <th>ExchangeRateDate</th>
                <th>ReleaseDate</th>

                <th>BulletinNo</th>

                <th>Kod</th>
                <th>CurrencyCode</th>

                <th>Unit</th>

                <th>Isim</th>
                <th>CurrencyName</th>

                <th>ForexBuying</th>
                <th>ForexSelling</th>

                <th>BanknoteBuying</th>
                <th>BanknoteSelling</th>

                <th>CrossRateUSD</th>
                <th>CrossRateOther</th>

                <th>CreateDate</th>
                <th>UpdateDate</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in exchangeRates)
            {
                <tr style="@(item.CurrencyCode == "USD" || item.CurrencyCode == "EUR" ? "background:orange;" : "")">
                    <td>@item.Id</td>

                    <td>@item.ExchangeRateDate.ToShortDateString()</td>
                    <td>@item.ReleaseDate.ToShortDateString()</td>

                    <td>@item.BulletinNo</td>

                    <td>@item.Kod</td>
                    <td>@item.CurrencyCode</td>

                    <td>@item.Unit</td>

                    <td>@item.Isim</td>
                    <td>@item.CurrencyName</td>

                    <td>@item.ForexBuying</td>
                    <td>@item.ForexSelling</td>

                    <td>@item.BanknoteBuying</td>
                    <td>@item.BanknoteSelling</td>

                    <td>@item.CrossRateUSD</td>
                    <td>@item.CrossRateOther</td>

                    <td>@item.CreateDate.DateTime.ToLongDateString()   @item.CreateDate.DateTime.ToLongTimeString()</td>
                    <td>@item.UpdateDate.DateTime.ToLongDateString()   @item.UpdateDate.DateTime.ToLongTimeString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private CancellationTokenSource cts = new CancellationTokenSource();

    private ExchangeRate[] exchangeRates;
    private DateTimeOffset date;
    private int newRecords = 0;
    private string errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        date = DateTimeOffset.Now;
        await this.InsertAndFetch();
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }

    private async Task DateOnChange(ChangeEventArgs e)
    {
        exchangeRates = null;
        date = DateTimeOffset.Parse(e.Value.ToString());

        await this.InsertAndFetch();

        Thread.Sleep(500);
    }

    private async Task InsertAndFetch()
    {
        try
        {
            (newRecords, exchangeRates) = await ExchangeRateService.InsertAndFetch(date, cancellationToken: cts.Token);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message + (ex.InnerException != null ? "\n\nInnerException=" + ex.InnerException.Message : "");
        }
    }
}
